# -*- coding: utf-8 -*-
"""sistemaRecomendacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/126Ta4STqQB-ccJe_nKPmA2fSb0D4fuh4

### **Instalação do surprise**
"""

!pip install surprise

"""### **Importações**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from surprise import KNNWithMeans
from surprise import Dataset
from surprise import accuracy
from surprise import Reader
from surprise.model_selection import train_test_split
from sklearn.decomposition import TruncatedSVD

"""### **Carregamento do dataset**"""

dataset = pd.read_csv('/content/data.csv', header=None, names = ['user_id','question','rating'])
df = dataset.head(100000)
print(df.head(4))
print(df.shape)
df.isnull().sum()

"""### **Recomendação baseada em popularidade**"""

new_df=df.groupby("question").filter(lambda x:x['rating'].count() >=50)
print(new_df.head())
ratings_df = pd.DataFrame(new_df.groupby('question').rating.mean())
ratings_df['rating_counts'] = new_df.groupby('question').rating.count()
ratings_df.sort_values(by='rating_counts', ascending=False).head(5)

#avaliação média
C = ratings_df['rating'].mean()
print(C)

#minimo de avaliações
m = ratings_df.rating_counts.min(); m
print(m)

#v = n avaliações de uma questao
#R = avaliação média da questao

def weighted_rating(x, m=m, C=C):
    v = x['rating_counts']
    R = x['rating']
    return (v/(v+m) * R) + (m/(m+v) * C)

ratings_df['score'] = ratings_df.apply(weighted_rating, axis=1)
ratings_df.sort_values(by='score', ascending=False).head(15)

"""### **Filtragem colaborativa item-item**"""

reader = Reader()
data = Dataset.load_from_df(new_df,reader)

trainset, testset = train_test_split(data, test_size=0.2,random_state=10)
algo = KNNWithMeans(k=5, sim_options={'user_based': False})
algo.fit(trainset)

algo.get_neighbors(3, 15)

ratings_df.iloc[[14, 20, 13, 15, 11, 18, 21, 17, 10, 6, 5, 23, 4, 16, 3]].index

"""### **Sistema de filtragem colaborativa baseado em modelo**"""

new_df1=new_df.head(20000)
ratings_matrix = new_df1.pivot_table(values='rating', index='user_id', columns='question', fill_value=0)
ratings_matrix.head()

print(ratings_matrix.shape)
X = ratings_matrix.T
X.head()

SVD_model = TruncatedSVD(n_components=10)
decomposed_matrix = SVD_model.fit_transform(X)
decomposed_matrix.shape

"""### **Matriz de correlação: semelhança entre questões (0-1)**"""

correlation_matrix = np.corrcoef(decomposed_matrix)
correlation_matrix.shape

correlation_matrix

i = "044023722X"

questions_name = list(X.index)
question_ID = questions_name.index(i)
question_ID

correlation_question_ID = correlation_matrix[question_ID]
correlation_question_ID.shape

Recommend = list(X.index[correlation_question_ID > 0.50])
Recommend.remove(i) 
Recommend[0:10]